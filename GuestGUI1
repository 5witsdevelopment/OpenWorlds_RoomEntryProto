import asyncio
import websockets

async def handleData(websocket, path):
    while True:
        newdata = await websocket.recv()
        print(newdata)

async def handler(websocket, path):
    consumer_task = asyncio.ensure_future(consumer_handler(websocket, path))
    producer_task = asyncio.ensure_future(producer_handler(websocket, path))
    done, pending = await asyncio.wait(
        [consumer_task, producer_task],
        return_when=asyncio.FIRST_COMPLETED,
    )

    for task in pending:
        task.cancel()

async def consumer_handler(websocket, path):
    async for message in websocket:
        print(message)

async def producer_handler(websocket, path):
    n = 0
    while True:
        await asyncio.sleep(10)
        await websocket.send(str(n))
        n += 1


start_server = websockets.serve(handler, '0.0.0.0', 5300)
asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()